DROP TABLE IF EXISTS P2P;
DROP TABLE IF EXISTS RECOMMENDATIONS;
DROP TABLE IF EXISTS XP;
DROP TABLE IF EXISTS TIMETRACKING;
DROP TABLE IF EXISTS FRIENDS;
DROP TABLE IF EXISTS TRANSFERREDPOINTS;
DROP TABLE IF EXISTS VERTER;
DROP TABLE IF EXISTS CHECKS;
DROP TABLE IF EXISTS TASKS;
DROP TABLE IF EXISTS PEERS;
DROP TYPE IF EXISTS CHECKSTATUS;
CREATE TABLE PEERS
(
    NICKNAME VARCHAR NOT NULL PRIMARY KEY,
    BIRTHDAY DATE    NOT NULL
);
CREATE TABLE TASKS
(
    TITLE      VARCHAR NOT NULL PRIMARY KEY,
    PARENTTASK VARCHAR DEFAULT NULL,
    MAXXP      INTEGER NOT NULL
);
CREATE TABLE CHECKS
(
    ID   BIGINT PRIMARY KEY,
    PEER VARCHAR NOT NULL,
    TASK VARCHAR NOT NULL,
    DATE DATE    NOT NULL,
    CONSTRAINT FK_CHECKS_PEERS_ID FOREIGN KEY (PEER) REFERENCES PEERS (NICKNAME),
    CONSTRAINT FK_CHECKS_TASKS_ID FOREIGN KEY (TASK) REFERENCES TASKS (TITLE)
);
CREATE TYPE CHECKSTATUS AS ENUM ('Start', 'Success', 'Failure');
CREATE TABLE P2P
(
    ID           BIGINT PRIMARY KEY,
    CHECK_ID     BIGINT      NOT NULL,
    CHECKINGPEER VARCHAR     NOT NULL,
    STATE        CHECKSTATUS NOT NULL,
    TIME         TIME        NOT NULL,
    CONSTRAINT FK_P2P_CHESKS_ID FOREIGN KEY (CHECK_ID) REFERENCES CHECKS (ID),
    CONSTRAINT FK_P2P_PEERS_ID FOREIGN KEY (CHECKINGPEER) REFERENCES PEERS (NICKNAME)
);
CREATE TABLE VERTER
(
    ID       BIGINT PRIMARY KEY,
    CHECK_ID BIGINT      NOT NULL,
    STATE    CHECKSTATUS NOT NULL,
    TIME     TIME        NOT NULL,
    CONSTRAINT FK_VERTER_CHECK_ID FOREIGN KEY (CHECK_ID) REFERENCES CHECKS (ID)
);
CREATE TABLE TRANSFERREDPOINTS
(
    ID           BIGINT PRIMARY KEY,
    CHECKINGPEER VARCHAR NOT NULL,
    CHECKEDPEER  VARCHAR NOT NULL,
    POINTSAMOUNT INTEGER DEFAULT 0,
    CONSTRAINT FK_TRANSFERREDPOINTS_CHECKINGPEER_PEERS_ID FOREIGN KEY (CHECKINGPEER) REFERENCES PEERS (NICKNAME),
    CONSTRAINT FK_TRANSFERREDPOINTS_CHECKEDPEER_PEERS_ID FOREIGN KEY (CHECKEDPEER) REFERENCES PEERS (NICKNAME)
);
CREATE TABLE FRIENDS
(
    ID    BIGINT PRIMARY KEY,
    PEER1 VARCHAR NOT NULL,
    PEER2 VARCHAR NOT NULL,
    CONSTRAINT FK_FRIENDS_PEER1_PEERS_ID FOREIGN KEY (PEER1) REFERENCES PEERS (NICKNAME),
    CONSTRAINT FK_FRIENDS_PEER2_PEERS_ID FOREIGN KEY (PEER2) REFERENCES PEERS (NICKNAME)
);
CREATE TABLE RECOMMENDATIONS
(
    ID             BIGINT PRIMARY KEY,
    PEER           VARCHAR NOT NULL,
    RECOMENDEDPEER VARCHAR NOT NULL,
    CONSTRAINT FK_FRIENDS_PEER_PEERS_ID FOREIGN KEY (PEER) REFERENCES PEERS (NICKNAME),
    CONSTRAINT FK_FRIENDS_RECOMENDEDPEER_PEERS_ID FOREIGN KEY (RECOMENDEDPEER) REFERENCES PEERS (NICKNAME)
);
CREATE TABLE XP
(
    ID       BIGINT PRIMARY KEY,
    CHECK_ID BIGINT NOT NULL,
    XPAMOUNT INTEGER,
    CONSTRAINT FK_XP_CHECK_ID FOREIGN KEY (CHECK_ID) REFERENCES CHECKS (ID)
);
CREATE TABLE TIMETRACKING
(
    ID    BIGINT PRIMARY KEY,
    PEER  VARCHAR   NOT NULL,
    DATE  DATE      NOT NULL,
    TIME  TIME NOT NULL,
    STATE INTEGER   NOT NULL,
    CONSTRAINT FK_TIMETRACKING_PEERS_ID FOREIGN KEY (PEER) REFERENCES PEERS (NICKNAME)
);

CREATE OR REPLACE PROCEDURE EXPORT_TO_CSV(DEL CHARACTER, PATH TEXT)
    LANGUAGE PLPGSQL
AS
$$
DECLARE
    STATEMENT TEXT;
    TABLES    RECORD;
BEGIN
    FOR TABLES IN
        SELECT TABLE_NAME
        FROM INFORMATION_SCHEMA.TABLES
        WHERE TABLE_TYPE = 'BASE TABLE'
          AND TABLE_NAME NOT LIKE ('pg_%')
          AND TABLE_NAME NOT LIKE ('sql_%')
        LOOP
            STATEMENT := 'COPY ' || TABLES.TABLE_NAME || ' TO ''' ||
                         PATH || '/' || TABLES.TABLE_NAME || '.csv' ||
                         ''' WITH DELIMITER ''' || DEL || '''CSV;';
            EXECUTE STATEMENT;
        END LOOP;
END;
$$;

CREATE OR REPLACE PROCEDURE IMPORT_FROM_CSV(DEL CHARACTER, PATH TEXT)
    LANGUAGE PLPGSQL
AS
$$
DECLARE
    STATEMENT TEXT;
    TABLES    RECORD;
BEGIN
    STATEMENT := 'COPY peers FROM ''' ||
                 PATH || '/peers.csv' ||
                 ''' WITH DELIMITER ''' || DEL || '''CSV;';
    EXECUTE STATEMENT;
    STATEMENT := 'COPY tasks FROM ''' ||
                 PATH || '/tasks.csv' ||
                 ''' WITH DELIMITER ''' || DEL || '''CSV;';
    EXECUTE STATEMENT;
    STATEMENT := 'COPY checks FROM ''' ||
                 PATH || '/checks.csv' ||
                 ''' WITH DELIMITER ''' || DEL || '''CSV;';
    EXECUTE STATEMENT;
    FOR TABLES IN
        SELECT TABLE_NAME
        FROM INFORMATION_SCHEMA.TABLES
        WHERE TABLE_TYPE = 'BASE TABLE'
          AND TABLE_NAME NOT LIKE ('pg_%')
          AND TABLE_NAME NOT LIKE ('sql_%')
          AND TABLE_NAME NOT LIKE ('peers')
          AND TABLE_NAME NOT LIKE ('checks')
          AND TABLE_NAME NOT LIKE ('tasks')

        LOOP
            STATEMENT := 'COPY ' || TABLES.TABLE_NAME || ' FROM ''' ||
                         PATH || '/' || TABLES.TABLE_NAME || '.csv' ||
                         ''' WITH DELIMITER ''' || DEL || '''CSV;';
            EXECUTE STATEMENT;
        END LOOP;
END;
$$;

CALL IMPORT_FROM_CSV(';', 'B:\CSV');
